#include "basic_spring_stuff.h"
#define TAK

piece  base, bottom, horns1, horns2, horns3, base1, base2, base3, heart1, heart2, heart3;

static-var structureheight, inground;

#define STRUCTUREBUILDING		1024+0

Sounds()
{
	play-sound( "heartbeat", 20 );
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Heartbeating()
{
	while( TRUE )
	{
		hide heart1;
		show heart2;	
		sleep 200;
		hide heart2;
		show heart3;	
		sleep 200;
		hide heart3;
		show heart1;	
		sleep 200;
	}
}

Go()
{ 	}

Stop()
{	}

Create()
{
	hide heart2;
	hide heart3;	
	//////////////////////////////////START BUILD CYCLE
	structureheight	= (get UNIT_HEIGHT)*(-1);
	move bottom to y-axis structureheight now;
	while( get BUILD_PERCENT_LEFT )
	{
		move bottom to y-axis (structureheight * (get BUILD_PERCENT_LEFT)/100) speed [10];
		emit-sfx STRUCTUREBUILDING from base;
		sleep 50;
	}
	move bottom to y-axis 0 speed [10];
	/////////////////////////////////END BUILD CYCLE
	start-script SmokeUnit();
	GET PLAY_SOUND (0, 6553600,0,0);
	start-script Heartbeating();
}

SweetSpot(piecenum)
{	piecenum = base; }


StartBuilding(null, null2)
{	
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
}

QueryNanoPiece(piecenum)
{	piecenum = base; }

Killed(severity, corpsetype, smoketype)
{
	if (severity <= 50)
	{
		corpsetype = 1;
		explode heart1 type BITMAPONLY | BITMAP;
		return (corpsetype);
	}
	else
	{
		corpsetype = 2;
		return (corpsetype);
	}
	return(0);
}